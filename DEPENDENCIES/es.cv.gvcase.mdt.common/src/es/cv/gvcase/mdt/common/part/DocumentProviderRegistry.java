/*******************************************************************************
 * Copyright (c) 2008, 2009 Conselleria de Infraestructuras y Transporte, Generalitat 
 * de la Comunitat Valenciana . All rights reserved. This program
 * and the accompanying materials are made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: Francisco Javier Cano Muñoz (Prodevelop) – Initial implementation.
 *
 ******************************************************************************/
package es.cv.gvcase.mdt.common.part;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.ui.URIEditorInput;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.part.FileEditorInput;

import es.cv.gvcase.emf.common.util.PathsUtil;

/**
 * A registry to store and get {@link CachedResourcesDocumentProvider}s based on
 * editing domain identifiers and editor inputs.
 * 
 * @author <a href="mailto:fjcano@prodevelop.es">Francisco Javier Cano Muñoz</a>
 * 
 */
public class DocumentProviderRegistry extends
		HashMap<String, CachedResourcesDocumentProvider> {

	/**
	 * Serial version unique identifier automatically generated by Eclipse.
	 */
	private static final long serialVersionUID = 1320736158793188641L;

	// // Singleton

	/**
	 * Singleton instance.
	 */
	private static DocumentProviderRegistry INSTANCE = new DocumentProviderRegistry();

	/**
	 * Singleton instance getter.
	 * 
	 * @return
	 */
	public static DocumentProviderRegistry getInstance() {
		return INSTANCE;
	}

	/**
	 * Default constructor. Private for Singleton.
	 */
	private DocumentProviderRegistry() {
		return;
	}

	// // functionality

	/**
	 * Use get(String IEditorInput) instead. <br>
	 * Default {@link Map#get(Object)} overridden to prevent its use.
	 */
	@Override
	public CachedResourcesDocumentProvider get(Object arg0) {
		throw new UnsupportedOperationException(
				"Operation not supported. Use #get(String domainID, IEditorInput input)");
	}

	/**
	 * Gets (creates one if necessary) a {@link CachedResourcesDocumentProvider}
	 * for the given editing domain identifier and the given editor input.
	 * 
	 * @param editingDomainID
	 * @param editorInput
	 * @return
	 */
	public CachedResourcesDocumentProvider get(String editingDomainID,
			IEditorInput editorInput) {
		// calculate key
		String key = calculateKey(editingDomainID, editorInput);
		if (containsKey(key)) {
			// if there is a CachedResourcedDocumentProvider already registered,
			// return it.
			return super.get(key);
		} else {
			// if there is none, create one, register it and return it.
			CachedResourcesDocumentProvider documentProvider = new CachedResourcesDocumentProvider(
					editingDomainID);
			put(key, documentProvider);
			return documentProvider;
		}
	}

	/**
	 * Check is there is any {@link CachedResourcesDocumentProvider} registered
	 * for the given editing domain identifier and the given editor input.
	 * 
	 * @param editingDomainID
	 * @param editorInput
	 * @return
	 */
	public boolean containsKey(String editingDomainID, IEditorInput editorInput) {
		// calculate key from given editing domain identifier and given editor
		// input.
		String key = calculateKey(editingDomainID, editorInput);
		// delegate to default method.
		return super.containsKey(key);
	}

	/**
	 * Add a {@link CachedResourcesDocumentProvider} to this registry using the
	 * given editing domain registry and the given editor input to create the
	 * key.
	 * 
	 * @param editingDomainID
	 * @param editorInput
	 * @param provider
	 */
	public void put(String editingDomainID, IEditorInput editorInput,
			CachedResourcesDocumentProvider provider) {
		// calculate key
		String key = calculateKey(editingDomainID, editorInput);
		// delegate to default method.
		put(key, provider);
	}

	private static final String AMarker = ">-<";

	/**
	 * Calculates a key from the given editing domain identifier and the given
	 * editor input.
	 * 
	 * @param editingDomainID
	 * @param editorInput
	 * @return
	 */
	private String calculateKey(String editingDomainID, IEditorInput editorInput) {
		// key is 'editing domain id' + ' editor input as uri string'
		String key = editingDomainID;
		if (editorInput instanceof FileEditorInput
				|| editorInput instanceof URIEditorInput) {
			key += (AMarker + PathsUtil.fromEditorInputToURIString(editorInput));
		}
		return key;
	}

}
