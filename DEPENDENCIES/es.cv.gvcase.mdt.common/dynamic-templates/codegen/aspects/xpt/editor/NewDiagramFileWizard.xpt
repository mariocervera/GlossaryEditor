/**
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 *    Dmitry Stadnik (Borland) - rewritten in xpand
 *    Francisco Javier Cano Munyoz (Prodevelop) - adaptation to MOSKitt Galileo
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::editor::Utils»

«AROUND NewDiagramFileWizard FOR gmfgen::GenDiagram-»

«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND xpt::editor::NewDiagramFileWizard::className» extends org.eclipse.jface.wizard.Wizard 
	implements es.cv.gvcase.mdt.common.part.INewDiagramFileWizard {

	«EXPAND xpt::Common::generatedMemberComment»
	private «EXPAND xpt::editor::NewDiagramFileWizard::creationPage» myFileCreationPage;

	«EXPAND xpt::Common::generatedMemberComment»
	private es.cv.gvcase.mdt.common.part.ModelElementSelectionPage modelElementSelectionPage;
	
	«EXPAND xpt::Common::generatedMemberComment»
	private es.cv.gvcase.mdt.common.part.SelectModelElementsForDiagramDialog diagramElementsSelectionPage;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.transaction.TransactionalEditingDomain myEditingDomain;

	// //
	// Root model element
	// //

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.ecore.EObject selectedRootElement = null;

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.emf.ecore.EObject getRootModelElement() {
		return selectedRootElement;
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	public void setRootModelElement(org.eclipse.emf.ecore.EObject rootElement) {
		this.selectedRootElement = rootElement;
	}

	// //
	// Diagram kind
	// //

	«EXPAND xpt::Common::generatedMemberComment»
	private String diagramKind = "«editorGen.modelID»";
	
	«EXPAND xpt::Common::generatedMemberComment»
	public String getDiagramKind() {
		return diagramKind;
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	public void setDiagramKind(String diagramKind) {
		this.diagramKind = diagramKind;
	}
	
	// //
	// Preferences hint
	// //
	
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint preferencesHint = new
	    	org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint("«editorGen.plugin.iD»");
	
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint getPreferencesHint() {
		return this.preferencesHint;
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	public void setPreferencesHint(org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint preferencesHint) {
		this.preferencesHint = preferencesHint;
	}
		
	// //
	// Selected elements
	// //
	
	«EXPAND xpt::Common::generatedMemberComment»
	private java.util.Collection<org.eclipse.emf.ecore.EObject> selectedElements = null;

	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.Collection<org.eclipse.emf.ecore.EObject> getSelectedElementForDiagram() {
		return selectedElements;
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	public void setSelectedElementForDiagram(java.util.Collection<org.eclipse.emf.ecore.EObject> selectedEObjects) {
		this.selectedElements = selectedEObjects;
	}

	// //
	// class
	// //

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND xpt::editor::NewDiagramFileWizard::className»(org.eclipse.emf.common.util.URI domainModelURI,
			org.eclipse.emf.ecore.EObject diagramRoot,
			org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain) {
		«EXPAND xpt::Common::_assert('domainModelURI != null : \"Domain model uri must be specified\"')-»
	    «EXPAND xpt::Common::_assert('diagramRoot != null : \"Doagram root element must be specified\"')-»
	    «EXPAND xpt::Common::_assert('editingDomain != null : \"Editing domain must be specified\"')-»

		myFileCreationPage = new «EXPAND xpt::editor::NewDiagramFileWizard::creationPage»(«EXPAND xpt::Externalizer::accessorCall(nameKey(i18nKeyForNewDiagramFileWizardCreationPage(self))) FOR editorGen», org.eclipse.jface.viewers.StructuredSelection.EMPTY);
		myFileCreationPage.setTitle(«EXPAND xpt::Externalizer::accessorCall(titleKey(i18nKeyForNewDiagramFileWizardCreationPage(self))) FOR editorGen»);
		myFileCreationPage.setDescription(org.eclipse.osgi.util.NLS.bind(
				«EXPAND xpt::Externalizer::accessorCall(descriptionKey(i18nKeyForNewDiagramFileWizardCreationPage(self))) FOR editorGen», 
				«EXPAND xpt::editor::VisualIDRegistry::modelID»));
		org.eclipse.core.runtime.IPath filePath;
		String fileName = org.eclipse.emf.common.util.URI.decode(domainModelURI.trimFileExtension().lastSegment());
		if (domainModelURI.isPlatformResource()) {
			filePath = new org.eclipse.core.runtime.Path(domainModelURI.trimSegments(1).toPlatformString(true));
		} else if (domainModelURI.isFile()) {
			filePath = new org.eclipse.core.runtime.Path(domainModelURI.trimSegments(1).toFileString());
		} else {
			// TODO : use some default path
			throw new IllegalArgumentException("Unsupported URI: " + domainModelURI); «EXPAND xpt::Common::nonNLS»
		}
		myFileCreationPage.setContainerFullPath(filePath);
		myFileCreationPage.setFileName(«getDiagramEditorUtilQualifiedClassName()».getUniqueFileName(
				filePath, fileName, "«editorGen.diagramFileExtension»")); «EXPAND xpt::Common::nonNLS»

		modelElementSelectionPage = new es.cv.gvcase.mdt.common.part.ModelElementSelectionPage(«EXPAND xpt::Externalizer::accessorCall(nameKey(i18nKeyForNewDiagramFileWizardRootSelectionPage(self))) FOR editorGen»);
		modelElementSelectionPage.setTitle(«EXPAND xpt::Externalizer::accessorCall(titleKey(i18nKeyForNewDiagramFileWizardRootSelectionPage(self))) FOR editorGen»);
		modelElementSelectionPage.setDescription(«EXPAND xpt::Externalizer::accessorCall(descriptionKey(i18nKeyForNewDiagramFileWizardRootSelectionPage(self))) FOR editorGen»);
		modelElementSelectionPage.setModelElement(diagramRoot);
		
		// fjcano :: adding a page to select which elements are to appear in the new diagram
		org.eclipse.jface.viewers.IBaseLabelProvider labelProvider = new org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider(
			new org.eclipse.emf.edit.provider.ComposedAdapterFactory(org.eclipse.emf.edit.provider.ComposedAdapterFactory.Descriptor.Registry.INSTANCE));
		org.eclipse.jface.viewers.IContentProvider contentProvider = new org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider(
			new org.eclipse.emf.edit.provider.ComposedAdapterFactory(org.eclipse.emf.edit.provider.ComposedAdapterFactory.Descriptor.Registry.INSTANCE));
		diagramElementsSelectionPage = new es.cv.gvcase.mdt.common.part.SelectModelElementsForDiagramDialog(contentProvider, labelProvider);
		
	   	myEditingDomain = editingDomain;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void addPages() {
		addPage(myFileCreationPage);
		addPage(modelElementSelectionPage);
		addPage(diagramElementsSelectionPage);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean performFinish() {
		java.util.List affectedFiles = new java.util.LinkedList();
		«IF null = editorGen.application-»
		org.eclipse.core.resources.IFile diagramFile = myFileCreationPage.createNewFile();
		«EXPAND xpt::Common::setCharset('diagramFile')-»
		affectedFiles.add(diagramFile);
		org.eclipse.emf.common.util.URI diagramModelURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);
		«ELSE-»
		org.eclipse.core.runtime.IPath diagramModelPath = myFileCreationPage.getContainerFullPath().append(myFileCreationPage.getFileName());
		org.eclipse.emf.common.util.URI diagramModelURI = org.eclipse.emf.common.util.URI.createFileURI(diagramModelPath.toString());
		«ENDIF-»
		org.eclipse.emf.ecore.resource.ResourceSet resourceSet = myEditingDomain.getResourceSet();
		final org.eclipse.emf.ecore.resource.Resource diagramResource = resourceSet.createResource(diagramModelURI);
		org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand command =
			new org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand(
				myEditingDomain, «EXPAND xpt::Externalizer::accessorCall(i18nKeyForNewDiagramFileWizardInitDiagramCommand(self)) FOR editorGen», affectedFiles) {

			protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(
					org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
						throws org.eclipse.core.commands.ExecutionException {
				int diagramVID = «EXPAND xpt::editor::VisualIDRegistry::getDiagramVisualIDMethodCall»(getRootModelElement());
				if (diagramVID != «EXPAND xpt::editor::VisualIDRegistry::visualID») {
					return org.eclipse.gmf.runtime.common.core.command.CommandResult.newErrorCommandResult(
						«EXPAND xpt::Externalizer::accessorCall(i18nKeyForNewDiagramFileWizardIncorrectRootError(self)) FOR editorGen»);
				}
				org.eclipse.gmf.runtime.notation.Diagram diagram =
					org.eclipse.gmf.runtime.diagram.core.services.ViewService.createDiagram(
						getRootModelElement(), «EXPAND xpt::editor::VisualIDRegistry::modelID»,
						«EXPAND xpt::plugin::Activator::preferenceHintAccess FOR editorGen»);
				diagramResource.getContents().add(diagram);
				«IF editorGen.sameFileForDiagramAndModel-»
				diagramResource.getContents().add(diagram.getElement());
				«ENDIF-»
				«IF not synchronized-»
				new «getDiagramContentInitializerQualifiedClassName()»().initDiagramContent(diagram);			
				«ENDIF-»
				return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
			}
		};
		try {
			org.eclipse.core.commands.operations.OperationHistoryFactory.getOperationHistory().execute(
				command, new org.eclipse.core.runtime.NullProgressMonitor(), null);
			diagramResource.save(«EXPAND xpt::Common::getSaveOptions»);
			«getDiagramEditorUtilQualifiedClassName()».openDiagram(diagramResource);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
				"Unable to create model and diagram", e); «EXPAND xpt::Common::nonNLS»
		} catch (java.io.IOException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
				"Save operation failed for: " + diagramModelURI, ex); «EXPAND xpt::Common::nonNLS»
		} catch (org.eclipse.ui.PartInitException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
				"Unable to open editor", ex); «EXPAND xpt::Common::nonNLS»
		}			
		return true;
	}
}
«ENDAROUND»

