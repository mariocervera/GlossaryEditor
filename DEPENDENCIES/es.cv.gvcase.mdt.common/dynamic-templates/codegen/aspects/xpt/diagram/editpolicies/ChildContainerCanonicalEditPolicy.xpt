/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«AROUND additions FOR gmfgen::GenChildContainer»
	«EXPAND refreshSemantic-»
	«EXPAND createViewDescriptors-»
«ENDAROUND»

«REM» fjcano :: this overriding of refreshSemantic is done to effectively filter views «ENDREM»
«DEFINE refreshSemantic FOR gmfgen::GenChildContainer»
	«EXPAND xpt::Common::generatedMemberComment»
	@Override
	protected void refreshSemantic() {
		super.refreshSemantic();
		// this will take care of the filtering of views
		org.eclipse.gmf.runtime.notation.Diagram diagram = es.cv.gvcase.mdt.common.util.MDTUtil.getHostDiagram(this);
		if (diagram != null) {
			«REM» fjcano :: the filtering of views is done here «ENDREM»
			es.cv.gvcase.mdt.common.util.MDTUtil.filterDiagramViews(diagram);
		}
	}
«ENDDEFINE»

«REM» mgil :: always create the views persisted = true «ENDREM»
«DEFINE createViewDescriptors FOR gmfgen::GenChildContainer»
	«EXPAND xpt::Common::generatedMemberComment»
	@Override
	protected org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor getViewDescriptor(
		org.eclipse.core.runtime.IAdaptable elementAdapter,
		java.lang.Class viewKind,
		String hint,
		int index) {

		return new org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor(
				elementAdapter,
				viewKind,
				hint,
				index, 
				true, «REM» persisted = true «ENDREM»
				host().getDiagramPreferencesHint());
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	@Override
	protected org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor getViewDescriptor(org.eclipse.emf.ecore.EObject element) {
		// Override to explicitly indicate the hint value to the ViewDescriptor
		String factoryHint = getDefaultFactoryHint();
		org.eclipse.core.runtime.IAdaptable elementAdapter = new CanonicalElementAdapter(element,
				factoryHint);

		int pos = getViewIndexFor(element);
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(
				elementAdapter, org.eclipse.gmf.runtime.notation.Node.class,
				String.valueOf(«getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID(
						(org.eclipse.gmf.runtime.notation.View) getHost().getModel(), element)), pos);
		
		// set persisted to true
		descriptor.setPersisted(true);
		return descriptor;
	}
«ENDDEFINE»
