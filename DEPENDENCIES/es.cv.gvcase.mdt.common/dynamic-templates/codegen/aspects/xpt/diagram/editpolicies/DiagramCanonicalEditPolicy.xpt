/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::updater::Utils»

«AROUND collectAllLinks FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
@SuppressWarnings("unchecked")
private java.util.Collection collectAllLinks(org.eclipse.gmf.runtime.notation.View view, java.util.Map domain2NotationMap) {
	if (!«EXPAND xpt::editor::VisualIDRegistry::modelID».equals(«EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»(view))) {
		return java.util.Collections.EMPTY_LIST;
	}
	java.util.List result = new java.util.LinkedList();
	switch («EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(view)) {
		«EXPAND xpt::diagram::editpolicies::DiagramCanonicalEditPolicy::caseSemanticElement FOREACH getAllSemanticElements(self)-»
	}
	for (java.util.Iterator children = view.getChildren().iterator(); children.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) children.next(), domain2NotationMap));
	}
	for (java.util.Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) edges.next(), domain2NotationMap));
	}
	removeDuplicatedLinks(result);
	purgeCollection(view.getDiagram(), result);
	return result;
}

	«EXPAND xpt::Common::generatedMemberComment»
	private void removeDuplicatedLinks(java.util.List linkDescriptors) {
		java.util.List toDelete = new java.util.ArrayList();
		for (int i = 0; i < linkDescriptors.size(); i++) {
			java.lang.Object object1 = linkDescriptors.get(i);
			if (object1 instanceof «editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName») {
				«editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName» linkDescriptor1 = («editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName») object1;
				for (int j = i + 1; j < linkDescriptors.size(); j++) {
					java.lang.Object object2 = linkDescriptors.get(j);
					if (object2 instanceof «editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName») {
						«editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName» linkDescriptor2 = («editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName») object2;
						«REM» fjcano :: remove duplicated link descriptors «ENDREM»
						if (checkSameLinkDescriptor(linkDescriptor1,
								linkDescriptor2)) {
							if (toDelete.contains(linkDescriptor2) == false) {
								toDelete.add(linkDescriptor2);
							}
						}
					}
				}
			}
		}
		for (java.lang.Object object : toDelete) {
			linkDescriptors.remove(object);
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private void purgeCollection(org.eclipse.gmf.runtime.notation.Diagram diagram, java.util.Collection list) {
		for (java.util.Iterator i = list.iterator(); i.hasNext();) {
			java.lang.Object obj = i.next();
			if (obj instanceof java.util.Collection) {
				purgeCollection(diagram, (java.util.Collection) obj);
			} else {
				if (obj instanceof «editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName») {
					«editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName» lDes = («editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName») obj;
					if (lDes.getModelElement() != null
							&& !es.cv.gvcase.mdt.common.util.MultiDiagramUtil
									.findEObjectReferencedInEAnnotation(
											diagram, lDes.getModelElement())) {
							i.remove();
					}
				}
			}
		}
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	«REM» fjcano :: checks whether two link descriptors are equal «ENDREM»
	private boolean checkSameLinkDescriptor(«editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName» link1,
			«editorGen.packageNamePrefix».part.«editorGen.diagramUpdater.linkDescriptorClassName» link2) {
		return es.cv.gvcase.mdt.common.util.MDTUtil.checkSameLinkDescriptor(link1, link2);
	}

«ENDAROUND»

«AROUND refreshSemantic FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void refreshSemantic() {
	java.util.List createdViews = new java.util.LinkedList();
	createdViews.addAll(refreshSemanticChildren());
	java.util.List createdConnectionViews = new java.util.LinkedList();
	createdConnectionViews.addAll(refreshSemanticConnections());
	«IF not links->isEmpty()-»
	createdConnectionViews.addAll(refreshConnections());
	«ENDIF-»

	if (createdViews.size() > 1) {
		// perform a layout of the container
		org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand layoutCmd = new org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand(host().getEditingDomain(), createdViews, host());
		executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(layoutCmd));
	}

	createdViews.addAll(createdConnectionViews);
	makeViewsImmutable(createdViews);
	org.eclipse.gmf.runtime.notation.Diagram diagram = es.cv.gvcase.mdt.common.util.MDTUtil.getHostDiagram(this);
	«REM» [ViewInfo] to filter the diagram by type «ENDREM»
	if (diagram != null) {
		es.cv.gvcase.mdt.common.util.MDTUtil.filterDiagramViews(diagram);
	}
}
«ENDAROUND»

