/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::editparts::Utils»
«EXTENSION aspects::diagram::editparts::editPartsUtils»

«AROUND extendsList FOR gmfgen::GenCompartment-»
extends «IF listLayout»es.cv.gvcase.mdt.common.diagram.editparts.ListCompartmentEditPart«ELSE»es.cv.gvcase.mdt.common.diagram.editparts.ShapeCompartmentEditPart«ENDIF-»
«ENDAROUND»

«AROUND additions FOR gmfgen::GenCompartment»
	«EXPAND getAdapter FOR self»
	«EXPAND viewResolver FOR self-»
«ENDAROUND»

«DEFINE getAdapter FOR gmfgen::GenCompartment»
	«EXPAND xpt::Common::generatedMemberComment»
	public Object getAdapter(Class adapter) {
		if (adapter != null && adapter.equals(«getViewandFeatureResolverClass()».class)) {
			return this.«getViewAndFeatureResolverDeclarationName()»;
		}
		return super.getAdapter(adapter);
	}
«ENDDEFINE»

«DEFINE viewResolver FOR gmfgen::GenCompartment-»
«EXPAND xpt::Common::generatedMemberComment-»
	private «getViewandFeatureResolverClass()» «getViewAndFeatureResolverDeclarationName()» = new «getViewandFeatureResolverClass()»() {

		public boolean isEObjectNode(org.eclipse.emf.ecore.EObject element) {
			if («diagram.editorGen.editor.packageName».«diagram.visualIDRegistryClassName».getNodeVisualID(getNotationView(),
					element) > -1) {
				return true;
			}
			return false;
		}

		public boolean isEObjectLink(org.eclipse.emf.ecore.EObject element) {
			if («diagram.editorGen.editor.packageName».«diagram.visualIDRegistryClassName».getLinkWithClassVisualID(element) > -1) {
				return true;
			}
			return false;
		}
		
		public int getEObjectSemanticHint(org.eclipse.emf.ecore.EObject element) {
			if (element != null) {
				return «diagram.editorGen.editor.packageName».«diagram.visualIDRegistryClassName».getNodeVisualID(getNotationView(),
					element);
			}
			return -1;
		}
		
		public org.eclipse.emf.ecore.EStructuralFeature getEStructuralFeatureForEClass(org.eclipse.emf.ecore.EClass class1) {
			«FOREACH childNodes AS childNode-»
				«EXPAND featureForMetaclass FOR childNode-»
			«ENDFOREACH-»
			return null;
		}
 	};
«ENDDEFINE»

«DEFINE featureForMetaclass FOR gmfgen::GenChildNode-»
		if («EXPAND MetaModel::MetaClass FOR modelFacet.metaClass».equals(class1)) {
			return «EXPAND MetaModel::MetaFeature FOR modelFacet.containmentMetaFeature»;
		}
«ENDDEFINE»

«AROUND handleNotificationEvent FOR gmfgen::GenCompartment-»
	«IF isStoringChildPositions(node)-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
			«EXPAND impl::diagram::editparts::CompartmentEditPart::handleNotificationEventBody-»
		}
	«ELSE-»
	«EXPAND xpt::Common::generatedMemberComment»
		protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
			«EXPAND impl::diagram::editparts::CompartmentEditPart::handleNotificationEventBody2-»
		}
	«ENDIF-»
«ENDAROUND»
